#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <unistd.h>
#include <strings.h>

#include <sys/wait.h>

       #include <stdlib.h>





#define NUM_OF_ARG  10
#define SPACE_ASCII 32U

extern char **environ;

int Last_Occur(char *s,char c,int Start_From)
{
    int i,k=0;
    for(i=strlen(s)-1;i>=Start_From;i--)
    {
        if(s[i]==c)
        {
                  k=1;
          break;
                }
        }
        
        
        if(k==1)
        {
			return i;

		}
		else 
		{
			return -1;
			
		}

 }

int First_Occur(char *s,char c,int Start_From)
{
    int i,k=0;
    
    for(i=Start_From;i<strlen(s)-1;i++)
    {
        if(s[i]==c)
        {
                  k=1;
          break;
                
        }
                
     }
     
        if(k==1)
        {
			return i;

		}
		else 
		{
			return -1;
			
		}     
     
     

 }




int main()
{

    char Buff[100];
    int len = 0;
    
    int Ret_ID = -1;
    int status = -1;
    
   char ptr_Arg[NUM_OF_ARG][NUM_OF_ARG];
   char* argument_list[NUM_OF_ARG] ;

   
   int First_Space=-1;

   int Start_Arg = 0;
   int Row_Iterator=0;
   int Col_Iterator=0;

    while (1) {
		
		
   First_Space=-1;

     Start_Arg = 0;
        Row_Iterator=0;
   Col_Iterator=0;
				

	printf("Execute Commands>  ");
	if (fgets(Buff, 100, stdin) == NULL) {


	    printf("error getting command name");
	    return -1;

	} else {


	    len = strlen(Buff);
	    Buff[len - 1] = 0;



	    if (strlen(Buff) == 0) {
		continue;
		
		
	    }


	    else {
			for(int i=0;i<strlen(Buff);i++)
   {

	   
	   if(Buff[i]!=SPACE_ASCII)
	   {
		   	   		   
		   	   		   
		       if(( First_Space = First_Occur(Buff,SPACE_ASCII,i) )==-1)
		       {
				   
				First_Space=strlen(Buff);   
				   
			   }
			   
		        Row_Iterator=0;

		       for(Start_Arg=i;Start_Arg<First_Space;Start_Arg++)
		       {

				   ptr_Arg[Col_Iterator][Row_Iterator]=Buff[Start_Arg];
				   Row_Iterator ++;
				   
	
				   
				   
				   }
				  ptr_Arg[Col_Iterator][Row_Iterator]='\0' ;
				  argument_list[Col_Iterator]=ptr_Arg[Col_Iterator];

		i=Start_Arg;		   
				  Col_Iterator ++;

		   
		  
		   
		   
	   }
	   
	   
	   
   }
   
   
   
   argument_list[Col_Iterator]=NULL;

   



	    }

	


	


	    Ret_ID = fork();

	    if (Ret_ID < 0) {

		printf("Fork is Failed");
		return -1;


	    }

	    else if (Ret_ID > 0) {

		wait(&status);

	    }

	    else if (Ret_ID == 0) {












		if (execvp(argument_list[0], argument_list) == -1) {

		    printf("Failed in exec function\n");


		}





	    }
	    

	}








    }

}




